avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Legend Title", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle("True function vs Estimation MC")
}
plot_mean_true(test, seq(-2, 2, by = 0.1))
plot_mean_true <- function(res_MC, x_evaluation){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Legend Title", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle("True function vs Estimation MC")
}
plot_mean_true(test, seq(-2, 2, by = 0.1))
plot_mean_true <- function(res_MC, x_evaluation){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Legend Title", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle("True function vs Estimation MC")
}
plot_mean_true(test, seq(-2, 2, by = 0.1))
plot_mean_true <- function(res_MC, x_evaluation){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Estimate and true function", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle("True function vs Estimation MC")
}
plot_mean_true(test, seq(-2, 2, by = 0.1))
plot_mean_true <- function(res_MC, x_evaluation){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Functions", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle("True function vs Estimation MC")
}
plot_mean_true(test, seq(-2, 2, by = 0.1))
plot_mean_true <- function(res_MC, x_evaluation){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate by MC')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Functions", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle(sprintf("True Function vs Estimation (Param1 = %.2f, Param2 = %d)", n_MC, n_val))
}
plot_mean_true(test, seq(-2, 2, by = 0.1))
plot_mean_true <- function(res_MC, x_evaluation,J){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate by MC')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Functions", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle(sprintf("True Function vs Estimation (n_MC = %.2f, J = %d)", n_MC, J))
}
plot_mean_true(test, seq(-2, 2, by = 0.1), 10)
plot_mean_true <- function(res_MC, x_evaluation,J){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate by MC')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Functions", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle(paste("True Function vs Estimation (n_MC =", n_MC, ", J =", J, ")"))
}
plot_mean_true(test, seq(-2, 2, by = 0.1), 10)
plot_mean_true <- function(res_MC, x_evaluation,J){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = "True Function")) + # Exact match to scale_colour_manual
geom_line(aes(y = avg, colour = "Estimate")) +          # Exact match to scale_colour_manual
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Legend Title",
values = c("True Function" = "blue", "Estimate" = "red") # Key-value pairs match labels
)
ggtitle(paste("True Function vs Estimation (n_MC =", n_MC, ", J =", J, ")"))
}
plot_mean_true(test, seq(-2, 2, by = 0.1), 10)
plot_mean_true <- function(res_MC, x_evaluation,J){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate by MC')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Functions", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate" = "red") # Customize colors
) +
ggtitle(paste("True Function vs Estimation (n_MC =", n_MC, ", J =", J, ")"))
}
plot_mean_true(test, seq(-2, 2, by = 0.1), 10)
plot_mean_true <- function(res_MC, x_evaluation,J){
n_MC = length(res_MC$list_gamma)
n_val = length(res_MC$list_g_hat_on_x[[1]])
#compute the avg
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
data <- data.frame(x_evaluation, avg, g_0_on_x = res_MC$g_0_on_x)
ggplot(data, aes(x = x_evaluation)) +
geom_line(aes(y = g_0_on_x, colour = 'True Function')) + # Changed the label
geom_line(aes(y = avg, colour = 'Estimate by MC')) + # Changed the label
ylab("Function value") +
xlab("Evaluation points") +
scale_colour_manual(
name = "Functions", # Change this to your desired legend title
values = c("True Function" = "blue", "Estimate by MC" = "red") # Customize colors
) +
ggtitle(paste("True Function vs Estimation (n_MC =", n_MC, ", J =", J, ")"))
}
plot_mean_true(test, seq(-2, 2, by = 0.1), 10)
compute_perf <- function(res_MC, measure){
n_MC = length(res_MC$list_gamma)
MSE = 0
var = 0
bias = 0
n_val <- length(res_MC$list_g_hat_on_x[[1]])
if (measure == 'MSE'){
for (i in 1:n_MC){
MSE = MSE + sum((res_MC$list_g_hat_on_x[[i]] - res_MC$g_0_on_x)^{2})
}
MSE = MSE/(n_MC*n_val)
return(MSE)
}
if (measure == 'Var'){
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
for (n in 1:n_MC){
var = var + sum((res_MC$list_g_hat_on_x[[n]] - avg)^{2})
}
var = var/(n_MC*n_val)
return(var)
}
if (measure == 'bias'){
n_val <- length(res_MC$list_g_hat_on_x[[1]])
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]
}}
for (n in 1:n_MC){
bias = bias + sum((res_MC$g_0_on_x - avg/n_MC)^{2})
}
bias = bias/(n_MC*n_val)
return(bias)
}
}
compute_perf(test, 'Var')
compute_perf(test, 'MSE')
compute_perf(test, 'bias')
calcul_W(res_MC$list_W[[1]])
create_W(res_MC$list_W[[1]])
create_W(test$list_W[[1]])
compute_perf <- function(res_MC, measure){
n_MC = length(res_MC$list_gamma)
MSE = 0
var = 0
bias = 0
sup_norm = 0
M = 0
n_val <- length(res_MC$list_g_hat_on_x[[1]])
if (measure == 'MSE'){
for (i in 1:n_MC){
MSE = MSE + sum((res_MC$list_g_hat_on_x[[i]] - res_MC$g_0_on_x)^{2})
}
MSE = MSE/(n_MC*n_val)
return(MSE)
}
if (measure == 'Var'){
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
for (n in 1:n_MC){
var = var + sum((res_MC$list_g_hat_on_x[[n]] - avg)^{2})
}
var = var/(n_MC*n_val)
return(var)
}
if (measure == 'bias'){
n_val <- length(res_MC$list_g_hat_on_x[[1]])
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]
}}
for (n in 1:n_MC){
bias = bias + sum((res_MC$g_0_on_x - avg/n_MC)^{2})
}
bias = bias/(n_MC*n_val)
return(bias)
}
if (measure == 'supnorm'){
sup_norm_vect <- rep(0, n_MC)
for (n in 1:n_MC){
sup_norm_vect[n] = max(abs(res_MC$list_g_hat_on_x[[n]] - res_MC$g_0_on_x))
}
sup_norm = max(sup_norm_vect)
return(sup_norm)
}
if (measure == 'M'){
M_vect <- rep(0, n_MC)
for (n in 1:n_MC){
Omega <- create_W(res_MC$list_W[[n]])
M_vect[n] = calcul_M_g_hat_test_sample(res_MC$list_g_hat_on_x[[n]], Omega, n_val, res_MC$list_Y[[n]])
}
return (mean(M_vect))
}
}
calcul_M_g_hat_test_sample <- function(g_hat_on_Z_test, Omega, n_test, Y_test){
M = 0
for (i in 1:n_test){
for (j in 1:n_test){
M = M + (Y_test[i] - g_hat_on_Z_test[i])*(Y_test[j] - g_hat_on_Z_test[j])*Omega[i,j]
}
return(M/(n_test**2))
}}
compute_perf(test, 'M')
compute_perf(test, 'suprnorm')
compute_perf(test, 'supnorm')
compute_perf <- function(res_MC, measure){
n_MC = length(res_MC$list_gamma)
MSE = 0
var = 0
bias = 0
sup_norm = 0
M = 0
n_val <- length(res_MC$list_g_hat_on_x[[1]])
if (measure == 'MSE'){
for (i in 1:n_MC){
MSE = MSE + sum((res_MC$list_g_hat_on_x[[i]] - res_MC$g_0_on_x)^{2})
}
MSE = MSE/(n_MC*n_val)
return(MSE)
}
if (measure == 'Var'){
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]/n_MC
}}
for (n in 1:n_MC){
var = var + sum((res_MC$list_g_hat_on_x[[n]] - avg)^{2})
}
var = var/(n_MC*n_val)
return(var)
}
if (measure == 'bias'){
n_val <- length(res_MC$list_g_hat_on_x[[1]])
avg <- rep(0, n_val)
for (x in 1:n_val){
for (n in 1:n_MC){
avg[x] <- avg[x] + res_MC$list_g_hat_on_x[[n]][x]
}}
for (n in 1:n_MC){
bias = bias + sum((res_MC$g_0_on_x - avg/n_MC)^{2})
}
bias = bias/(n_MC*n_val)
return(bias)
}
if (measure == 'supnorm'){
sup_norm_vect <- rep(0, n_MC)
for (n in 1:n_MC){
sup_norm_vect[n] = max(abs(res_MC$list_g_hat_on_x[[n]] - res_MC$g_0_on_x))
}
sup_norm = max(sup_norm_vect)
return(sup_norm)
}
if (measure == 'M'){
M_vect <- rep(0, n_MC)
for (n in 1:n_MC){
Omega <- create_W(res_MC$list_W[[n]])
M_vect[n] = calcul_M_g_hat_test_sample(res_MC$list_g_hat_on_x[[n]], Omega, n_val, res_MC$list_Y[[n]])
}
return (list(mean(M_vect), sd(M_vect)))
}
}
compute_perf(test, 'M') #calcul du critère M moyen
load("C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/perf_MC_J4_n200_deg3_rhocase1_gcase2.RData")
data_param = c(400, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n400_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
source("code_b_splines_monte_carlo.R")
setwd("C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/master_thesis")
source("code_b_splines_monte_carlo.R")
library(splines)
library(MASS)
library(caret)
library(expm)
data_param = c(400, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n400_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
perf_MC_J4_n400_deg3_rhocase1_gcase2 <- rep(0, 5)
perf_MC_J4_n400_deg3_rhocase1_gcase2[1] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'M')
perf_MC_J4_n400_deg3_rhocase1_gcase2[2] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'supnorm')
perf_MC_J4_n400_deg3_rhocase1_gcase2[3] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'Var')
perf_MC_J4_n400_deg3_rhocase1_gcase2[4] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'MSE')
perf_MC_J4_n400_deg3_rhocase1_gcase2[5] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'bias')
perf_MC_J4_n400_deg3_rhocase1_gcase2
perf_MC_J4_n200_deg3_rhocase1_gcase2
save.image(file = "C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/perf_MC_J4_n400_deg3_rhocase1_gcase2.RData")
data_param = c(1000, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n400_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
perf_MC_J4_n1000_deg3_rhocase1_gcase2 <- rep(0, 5)
perf_MC_J4_n1000_deg3_rhocase1_gcase2[1] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'M')
data_param = c(1000, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n1000_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
perf_MC_J4_n1000_deg3_rhocase1_gcase2 <- rep(0, 5)
perf_MC_J4_n1000_deg3_rhocase1_gcase2[1] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'M')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[2] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'supnorm')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[3] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'Var')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[4] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'MSE')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[5] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'bias')
save.image(file = "C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/perf_MC_J4_n1000_deg3_rhocase1_gcase2.RData")
perf_MC_J4_n1000_deg3_rhocase1_gcase2
perf_MC_J4_n400_deg3_rhocase1_gcase2
source("code_b_splines_monte_carlo.R")
library(splines)
library(MASS)
library(caret)
library(expm)
data_param = c(400, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n400_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
perf_MC_J4_n400_deg3_rhocase1_gcase2 <- rep(0, 5)
perf_MC_J4_n400_deg3_rhocase1_gcase2[1] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'M')
perf_MC_J4_n400_deg3_rhocase1_gcase2[2] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'supnorm')
perf_MC_J4_n400_deg3_rhocase1_gcase2[3] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'Var')
perf_MC_J4_n400_deg3_rhocase1_gcase2[4] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'MSE')
perf_MC_J4_n400_deg3_rhocase1_gcase2[5] = compute_perf(MC_J4_n400_deg3_rhocase1_gcase2, 'bias')
save.image(file = "C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/perf_MC_J4_n400_deg3_rhocase1_gcase2.RData")
source("code_b_splines_monte_carlo.R")
library(splines)
library(MASS)
library(caret)
library(expm)
data_param = c(1000, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n1000_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
perf_MC_J4_n1000_deg3_rhocase1_gcase2 <- rep(0, 5)
perf_MC_J4_n1000_deg3_rhocase1_gcase2[1] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'M')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[2] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'supnorm')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[3] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'Var')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[4] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'MSE')
perf_MC_J4_n1000_deg3_rhocase1_gcase2[5] = compute_perf(MC_J4_n1000_deg3_rhocase1_gcase2, 'bias')
save.image(file = "C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/perf_MC_J4_n1000_deg3_rhocase1_gcase2.RData")
source("code_b_splines_monte_carlo.R")
library(splines)
library(MASS)
library(caret)
library(expm)
data_param = c(2500, 0.5, 0.9)
n_MC = 2000
J = 4
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
MC_J4_n2500_deg3_rhocase1_gcase2 <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, 2, data_param)
perf_MC_J4_n2500_deg3_rhocase1_gcase2 <- rep(0, 5)
perf_MC_J4_n2500_deg3_rhocase1_gcase2[1] = compute_perf(MC_J4_n2500_deg3_rhocase1_gcase2, 'M')
perf_MC_J4_n2500_deg3_rhocase1_gcase2[2] = compute_perf(MC_J4_n2500_deg3_rhocase1_gcase2, 'supnorm')
perf_MC_J4_n2500_deg3_rhocase1_gcase2[3] = compute_perf(MC_J4_n2500_deg3_rhocase1_gcase2, 'Var')
perf_MC_J4_n2500_deg3_rhocase1_gcase2[4] = compute_perf(MC_J4_n2500_deg3_rhocase1_gcase2, 'MSE')
perf_MC_J4_n2500_deg3_rhocase1_gcase2[5] = compute_perf(MC_J4_n2500_deg3_rhocase1_gcase2, 'bias')
save.image(file = "C:/Users/candi/Desktop/ETUDES/2025 - ENSAE 4A - EPFL3A/pdm/code/github/perf_MC_J4_n2500_deg3_rhocase1_gcase2.RData")
perf_MC_J4_n2500_deg3_rhocase1_gcase2
