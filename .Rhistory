MC <- "test"
list_MC[[i]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[i]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#save(MC,file=filename_MC)
}
print(MC)
#print(perf_MC)
#print(results_df)
#save(perf_MC,file=filename_perf)
}
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
for (i in 1:length(J_val)){
J <- J_val[i]
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
list_MC[[i]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[i]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#save(MC,file=filename_MC)
}
print(perf_MC)
#print(perf_MC)
#print(results_df)
#save(perf_MC,file=filename_perf)
}
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
for (i in 1:length(J_val)){
J <- J_val[i]
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
list_MC[[i]] = MC
perf_MC <- rep(i, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[i]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#save(MC,file=filename_MC)
}
print(perf_MC)
#print(perf_MC)
#print(results_df)
#save(perf_MC,file=filename_perf)
}
N_values <- c(200, 400, 1000, 2500)
Cases <- c(2, 3)
Rhouv_Rhozw <- list(c(0.5, 0.9), c(0.8, 0.9), c(0.8, 0.7))
J_val <- c(4, 6, 10, 18, 34)
parameter_combinations <- expand.grid(
J = J_val,
N = N_values,
Case = Cases,
Rhouv_Rhozw = seq_along(Rhouv_Rhozw) # Use indices for combinations
)
parameter_combinations
parameter_combinations[1,]$J
parameter_combinations[2,]$J
cl <- makeCluster(mc <- getOption("cl.cores", 4))
registerDoParallel(cl)
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
n_MC = 2000
results_df <- data.frame()
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- j
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
print(results_df)
print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
stopCluster(cl)
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- j
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
print(results_df)
#print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
cl <- makeCluster(mc <- getOption("cl.cores", 4))
registerDoParallel(cl)
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
n_MC = 2000
results_df <- data.frame()
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- j
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
print(results_df)
#print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
cl <- makeCluster(mc <- getOption("cl.cores", 4))
registerDoParallel(cl)
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
n_MC = 2000
results_df <- data.frame()
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- j
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#print(results_df)
#print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
print(results_df)
cl <- makeCluster(mc <- getOption("cl.cores", 4))
registerDoParallel(cl)
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
n_MC = 2000
results_df <- data.frame()
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- j
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#print(results_df)
#print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
print(results_df)
stopCluster(cl)
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#print(results_df)
print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
cl <- makeCluster(mc <- getOption("cl.cores", 4))
registerDoParallel(cl)
degree = 3
x_evaluation = seq(-2, 2, length.out = 100)
n_MC = 2000
results_df <- data.frame()
foreach (j=1:nrow(parameter_combinations))%dopar%{
params <- parameter_combinations[j,]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
list_MC <- list()
list_perfMC <- list()
filename_MC <- paste ("MC2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
filename_perf <- paste ("perf2000_fixedJ", "_J", J, "_degree", degree, "_rhozw" , rhozw,"_rhouv", rhouv , "_case", case, "_n", n_val, ".R" ,sep = "")
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
list_MC[[j]] = MC
perf_MC <- rep(0, 5)
#perf_MC[1] = compute_perf(MC, 'M')
#perf_MC[2] = compute_perf(MC, 'supnorm')
#perf_MC[3] = compute_perf(MC, 'Var')
#perf_MC[4] = compute_perf(MC, 'MSE')
#perf_MC[5] = compute_perf(MC, 'bias')
list_perfMC[[j]] = perf_MC
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
results_df <- rbind(results_df, result_row)
#print(results_df)
print(list_MC)
#save(perf_MC,file=filename_perf)
#save(results_df, file="perf_results")
}
stopCluster(cl)
cl <- makeCluster(getOption("cl.cores", 4))
registerDoParallel(cl)
results_list <- foreach(j = 1:nrow(parameter_combinations), .combine = rbind, .packages = "your_needed_packages") %dopar% {
params <- parameter_combinations[j, ]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
# Perform Monte Carlo simulations
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
# Compute performance metrics
#perf_MC <- c(#compute_perf(MC, 'M'),
#compute_perf(MC, 'supnorm'),
#compute_perf(MC, 'Var'),
#compute_perf(MC, 'MSE'),
#compute_perf(MC, 'bias'))
perf_MC <- rep(0, 5)
# Combine results
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
list(result_row = result_row, MC = MC)
}
cl <- makeCluster(getOption("cl.cores", 4))
registerDoParallel(cl)
results_list <- foreach(j = 1:nrow(parameter_combinations), .combine = rbind) %dopar% {
params <- parameter_combinations[j, ]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
# Perform Monte Carlo simulations
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
# Compute performance metrics
#perf_MC <- c(#compute_perf(MC, 'M'),
#compute_perf(MC, 'supnorm'),
#compute_perf(MC, 'Var'),
#compute_perf(MC, 'MSE'),
#compute_perf(MC, 'bias'))
perf_MC <- rep(0, 5)
# Combine results
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
list(result_row = result_row, MC = MC)
}
# Separate results and save
results_df <- do.call(rbind, lapply(results_list, `[[`, "result_row"))
cl <- makeCluster(getOption("cl.cores", 4))
registerDoParallel(cl)
results_list <- foreach(j = 1:nrow(parameter_combinations), .combine = rbind) %dopar% {
params <- parameter_combinations[j, ]
rhouv <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][1])
rhozw <- as.numeric(Rhouv_Rhozw[[params$Rhouv_Rhozw]][2])
case <- as.numeric(params$Case)
n_val <- as.numeric(params$N)
J <- as.numeric(params$J)
data_param = c(n_val, rhouv, rhozw)
# Perform Monte Carlo simulations
#MC <- MC_fixed_J(J, n_MC, degree, x_evaluation, g_sim_3, case, data_param)
MC <- "test"
# Compute performance metrics
#perf_MC <- c(#compute_perf(MC, 'M'),
#compute_perf(MC, 'supnorm'),
#compute_perf(MC, 'Var'),
#compute_perf(MC, 'MSE'),
#compute_perf(MC, 'bias'))
perf_MC <- rep(0, 5)
# Combine results
result_row <- data.frame(
Parameters = paste("J=", J, "N=", n_val, " Rhouv=", rhouv, " Rhozw=", rhozw, " Case=", case, sep=""),
J = J,
M = perf_MC[1],
Supnorm = perf_MC[2],
Var = perf_MC[3],
MSE = perf_MC[4],
Bias = perf_MC[5]
)
list(result_row = result_row, MC = MC)
}
print(results_list)
# Separate results and save
results_df <- do.call(rbind, lapply(results_list, `[[`, "result_row"))
do.call(rbind, lapply(results_list, `[[`, "result_row"))
